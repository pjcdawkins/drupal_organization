<?php
/**
 * @file
 * Functional tests for the Organization module.
 */

class OrganizationTestBase extends DrupalWebTestCase {

  /**
   * Helper function to create an organization.
   *
   * @param string $name
   *   The name of the organization.
   * @param object $owner
   *   The account owning the organization (default: a new user account with
   *   requisite permissions).
   *
   * @return object
   *   A saved organization entity.
   */
  protected function helperOrganizationCreate($name = NULL, $owner = NULL) {
    static $default_owner;
    if ($owner === NULL) {
      if ($default_owner === NULL) {
        $default_owner = $this->drupalCreateUser(array(
          'organization: create',
        ));
      }
      $owner = $default_owner;
    }
    $controller = entity_get_controller('user');
    $account = $controller->create(array(
      'name' => $name ?: $this->randomString(),
      'bundle' => 'organization',
      'status' => 1,
    ));
    $wrapper = entity_metadata_wrapper('user', $account);
    $wrapper->organization_owner = $owner;
    $controller->save($account);

    // Reload the account so it gets processed correctly.
    return $account;
  }
}

class OrganizationCrudTestBase extends OrganizationTestBase {

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Organization CRUD',
      'description' => 'Basic entity create/read/update/delete tests for the Organization module.',
      'group' => 'Organization',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  public function setUp() {
    $modules = array('organization');
    parent::setUp($modules);
  }

  /**
   * Create, update, and delete an organization.
   */
  public function testElectionCrud() {
    $test_user = $this->drupalCreateUser(array(
      'organization: create',
      'organization: update own',
      'organization: delete own',
    ));

    $this->drupalLogin($test_user);

    $this->drupalGet('user/' . $test_user->uid . '/organizations');
    $this->assertResponse(200, t('The page at user/%/organizations exists.'));

    // Check that the "Create new" link exists.
    $this->assertLink(t('Create new organization'));

    // Create a new organization with a random name.
    $org = $this->helperOrganizationCreateUi($this->randomString(), $test_user);

    // Update the organization's name.
    $this->helperOrganizationUpdateUi($org, array(
      'name' => $this->randomString(),
    ));

    // Delete the organization.
    $this->helperOrganizationDeleteUi($org);
  }

  /**
   * Test creating a new organization via the UI.
   */
  protected function helperOrganizationCreateUi($name, $owner, array $properties = array()) {
    $properties['name'] = $name;
    $this->drupalPost('user/' . $owner->uid . '/organizations/new', $properties, t('Save'));
    // The page should display that the new organization was saved.
    $this->assertRaw(
      t('The organization %name was saved.', array('%name' => $name)),
      t('Organization created correctly.')
    );

    // Load the newly created organization.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'user')
          ->entityCondition('bundle', 'organization')
          ->fieldCondition('organization_name', 'value', $name)
          ->fieldCondition('organization_owner', 'target_id', $owner->uid);
    $result = $query->execute();
    $ids = array_keys($result['user']);
    $id = reset($ids);
    $org = user_load($id);
    $this->assertTrue((bool) $org, t('Organization loaded from database'));

    return $org;
  }

  /**
   * Test updating an existing organization via the UI.
   */
  protected function helperOrganizationUpdateUi($org, array $edit) {
    $this->drupalPost('organization/' . $org->uid . '/edit', $edit, t('Save'));
    // The page should display that the organization was saved.
    $org = user_load($org->uid, TRUE);
    $this->assertRaw(
      t('The organization %name has been updated.', array('%name' => format_username($org))),
      t('Organization updated correctly.')
    );

    return $org;
  }

  /**
   * Test deleting an organization via the UI.
   */
  protected function helperOrganizationDeleteUi($org) {
    $this->drupalPost('organization/' . $org->uid . '/delete', array(), t('Delete'));
    // The page should display that the organization was deleted.
    $this->assertRaw(
      t('The organization %name has been deleted.', array('%name' => format_username($org))),
      t('Organization deleted successfully.')
    );
    // Test that the user was redirected to an existing page after deleting.
    $this->assertResponse(200, t('Redirected to an existent page after deleting.'));
  }

}
