<?php
/**
 * @file
 * Functional tests for the Organization module.
 */

/**
 * Entity CRUD tests.
 */
class OrganizationEntityTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $modules = array('organization');
    parent::setUp($modules);
  }

  /**
   * Provide basic information about the test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Organization Entity',
      'description' => 'Entity CRUD (create/read/update/delete) tests for the Organization module.',
      'group' => 'Organization',
    );
  }

  /**
   * Create, update, and delete an organization.
   */
  public function testOrganizationCrud() {
    $test_user = $this->drupalCreateUser(array(
      'organization: create',
      'organization: view own',
      'organization: update own',
      'organization: delete own',
    ));

    $this->drupalLogin($test_user);

    $this->drupalGet('user/' . $test_user->uid . '/organizations');

    // Check that the "Create new" link exists.
    $this->assertLink(t('Create new organization'));

    // Create a new organization with a random name.
    $org = $this->helperOrganizationCreateUi($this->randomString() . '&>!', $test_user);

    // Test that the organization name is provided properly.
    $this->assertEqual(format_username($org), $org->name);

    // Update the organization's name.
    $org = $this->helperOrganizationUpdateUi($org, array(
      'name' => $this->randomString() . '&>!',
    ));

    // Delete the organization.
    $this->helperOrganizationDeleteUi($org);
  }

  /**
   * Test creating a new organization via the UI.
   *
   * @param string $name
   *   The name of the new organization.
   * @param object $owner
   *   The owner of the new organization.
   * @param array $properties
   *   Any other properties (as form field keys) to set on the organization.
   *
   * @return object
   *   The organization entity.
   */
  protected function helperOrganizationCreateUi($name, $owner, array $properties = array()) {
    $properties['name'] = $name;
    $this->drupalPost('user/' . $owner->uid . '/organizations/new', $properties, t('Save'));
    // The page should display that the new organization was saved.
    $this->assertRaw(
      t('The organization %name was saved.', array('%name' => $name)),
      t('Organization created with success message.')
    );

    $this->assertRaw(check_plain($name), t('Organization name displayed correctly'));

    // Load the newly created organization.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'user')
          ->entityCondition('bundle', 'organization')
          ->propertyCondition('name', $name)
          ->fieldCondition('organization_owner', 'target_id', $owner->uid);
    $result = $query->execute();
    $ids = array_keys($result['user']);
    $id = reset($ids);
    $org = user_load($id);
    $this->assertTrue((bool) $org, t('Organization loaded from database'));

    return $org;
  }

  /**
   * Test updating an existing organization via the UI.
   *
   * @param object $org
   *   The organization entity to update.
   * @param array $edit
   *   An array of form fields and values to set.
   *
   * @return object
   *   The updated organization entity.
   */
  protected function helperOrganizationUpdateUi($org, array $edit) {
    $this->drupalPost('user/' . $org->uid . '/edit', $edit, t('Save'));
    // The page should display that the organization was saved.
    $org = user_load($org->uid, TRUE);
    $this->assertRaw(
      t('The changes have been saved.'),
      t('Organization updated with success message.')
    );

    return $org;
  }

  /**
   * Test deleting an organization via the UI.
   *
   * @param object $org
   *   The organization entity to delete.
   */
  protected function helperOrganizationDeleteUi($org) {
    $this->drupalPost('user/' . $org->uid . '/delete', array(), t('Delete'));
    // The page should display that the organization was deleted.
    $this->assertRaw(
      t('The organization %name was deleted.', array('%name' => $org->name)),
      t('Organization deleted with success message.')
    );
  }

}
